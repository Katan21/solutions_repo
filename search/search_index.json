{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 Investigating the Range as a Function of the Angle of Projection 1. Theoretical Foundation Deriving the Equations of Motion Projectile motion is a classic problem in physics governed by Newton\u2019s laws under constant gravitational acceleration, assuming no air resistance for simplicity. Let\u2019s start with the fundamentals. Consider a projectile launched from the origin \\((x_0, y_0) = (0, 0)\\) with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) above the horizontal. The acceleration is solely due to gravity, acting downward with magnitude \\(g\\) (typically \\(9.8 \\, \\text{m/s}^2\\) on Earth). We can break this into components: Horizontal motion : No acceleration ( \\(a_x = 0\\) ). Vertical motion : Acceleration \\(a_y = -g\\) . The initial velocity components are: \\[v_{0x} = v_0 \\cos\\theta\\] \\[v_{0y} = v_0 \\sin\\theta\\] Horizontal Motion The differential equation is: \\[ \\frac{d^2 x}{dt^2} = 0 \\] Integrating once: \\[ \\frac{dx}{dt} = v_{0x} = v_0 \\cos\\theta \\] Integrating again with initial condition \\(x(0) = 0\\) : \\[ x(t) = v_0 \\cos\\theta \\cdot t \\] Vertical Motion The differential equation is: \\[ \\frac{d^2 y}{dt^2} = -g \\] Integrating once: \\[ \\frac{dy}{dt} = v_{0y} - g t = v_0 \\sin\\theta - g t \\] Integrating again with \\( \\(y(0) = 0\\) \\) : \\[ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] These equations describe the projectile\u2019s position parametrically. The trajectory is a parabola, as \\(y(t)\\) is quadratic in \\(t\\) , while \\(x(t)\\) is linear. Family of Solutions The solutions depend on free parameters: - \\(v_0\\) : Initial velocity - \\(\\theta\\) : Angle of projection - \\(g\\) : Gravitational acceleration - Initial height \\( \\(h\\) \\) (if \\(y_0 \\neq 0\\) ) Varying these parameters generates a family of trajectories, from flat, fast arcs (low \\(\\theta\\) , high \\(v_0\\) ) to steep, short parabolas (high \\(\\theta\\) , low \\(v_0\\) ). 2. Analysis of the Range Deriving the Range The range \\(R\\) is the horizontal distance traveled when the projectile returns to \\(y = 0\\) . Set \\(y(t) = 0\\) : \\[ v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 = 0 \\] Factorize: \\[ t \\left( v_0 \\sin\\theta - \\frac{1}{2} g t \\right) = 0 \\] Solutions are \\( \\(t = 0\\) \\) (launch) and: \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\] This is the time of flight. Substitute into \\( \\(x(t)\\) \\) : \\[ R = x\\left(\\frac{2 v_0 \\sin\\theta}{g}\\right) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} = \\frac{2 v_0^2 \\sin\\theta \\cos\\theta}{g} \\] Using the identity \\( \\(2 \\sin\\theta \\cos\\theta = \\sin 2\\theta\\) \\) : \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\] Dependence on Angle Maximum Range : \\(R\\) is maximized when \\(\\sin 2\\theta = 1\\) , i.e., \\(2\\theta = 90^\\circ\\) , so \\(\\theta = 45^\\circ\\) . Then: \\[ R_{\\text{max}} = \\frac{v_0^2}{g} \\] Symmetry : \\(R(\\theta) = R(90^\\circ - \\theta)\\) , e.g., ranges at \\(30^\\circ\\) and \\(60^\\circ\\) are equal, due to \\(\\sin(180^\\circ - 2\\theta) = \\sin 2\\theta\\) . Limits : At \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) , \\(\\sin 2\\theta = 0\\) , so \\(R = 0\\) . Other Parameters Initial Velocity ( \\(v_0\\) ) : \\(R \\propto v_0^2\\) , a quadratic relationship. Doubling \\(v_0\\) quadruples the range. Gravity ( \\(g\\) ) : \\(R \\propto 1/g\\) . On a planet with lower \\(g\\) (e.g., the Moon), the range increases. 3. Practical Applications Sports : In soccer or golf, athletes adjust \\(\\theta\\) and \\(v_0\\) for desired distance, though air resistance and spin complicate the ideal \\(45^\\circ\\) . Engineering : Artillery and rocket launches optimize \\(\\theta\\) based on target distance and terrain. Uneven Terrain : If launched from height \\(h\\) , the range equation becomes: \\[ R = \\frac{v_0^2}{g} \\left( \\sin 2\\theta + \\frac{2 h g}{v_0^2} \\cos^2\\theta \\right)^{1/2} \\] Air Resistance : Introduces a drag force proportional to velocity squared, reducing range and shifting the optimal angle below \\(45^\\circ\\) . 4. Implementation Here\u2019s a Python script to simulate and visualize the range versus angle: import numpy as np import matplotlib.pyplot as plt # Parameters g = 9.8 # m/s^2 v0_values = [10, 20, 30] # m/s theta_deg = np.linspace(0, 90, 91) # degrees theta_rad = np.radians(theta_deg) # Range function def range_theta(v0, theta_rad, g): return (v0**2 * np.sin(2 * theta_rad)) / g # Compute ranges for different v0 ranges = {v0: range_theta(v0, theta_rad, g) for v0 in v0_values} # Plotting plt.figure(figsize=(10, 6)) for v0, R in ranges.items(): plt.plot(theta_deg, R, label=f'v0 = {v0} m/s') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs. Angle of Projection') plt.legend() plt.grid(True) plt.show() # Find maximum range and optimal angle for v0 in v0_values: R = range_theta(v0, theta_rad, g) max_R = np.max(R) opt_theta = theta_deg[np.argmax(R)] print(f\"v0 = {v0} m/s: Max Range = {max_R:.2f} m at {opt_theta}\u00b0\") Output Explanation The script plots \\(R\\) versus \\(\\theta\\) for \\(v_0 = 10, 20, 30 \\, \\text{m/s}\\) . Peaks occur at \\(45^\\circ\\) , with \\(R_{\\text{max}} = v_0^2 / g\\) . Higher \\(v_0\\) shifts the curve upward quadratically. Discussion Limitations Idealization : Assumes no air resistance, flat terrain, and constant \\(g\\) . Realism : Drag reduces range and optimal \\(\\theta\\) ; wind adds lateral deviation. Extensions Drag : Model with \\(F_d = -k v^2\\) , solved numerically (e.g., Runge-Kutta). Terrain : Adjust \\(y(t) = 0\\) to \\(y(t) = f(x)\\) . 3D Motion : Include crosswinds or spin (Magnus effect). This model, while simple, bridges theory and application, from classroom physics to real-world engineering challenges.","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#investigating-the-range-as-a-function-of-the-angle-of-projection","text":"","title":"Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#deriving-the-equations-of-motion","text":"Projectile motion is a classic problem in physics governed by Newton\u2019s laws under constant gravitational acceleration, assuming no air resistance for simplicity. Let\u2019s start with the fundamentals. Consider a projectile launched from the origin \\((x_0, y_0) = (0, 0)\\) with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) above the horizontal. The acceleration is solely due to gravity, acting downward with magnitude \\(g\\) (typically \\(9.8 \\, \\text{m/s}^2\\) on Earth). We can break this into components: Horizontal motion : No acceleration ( \\(a_x = 0\\) ). Vertical motion : Acceleration \\(a_y = -g\\) . The initial velocity components are: \\[v_{0x} = v_0 \\cos\\theta\\] \\[v_{0y} = v_0 \\sin\\theta\\]","title":"Deriving the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion","text":"The differential equation is: \\[ \\frac{d^2 x}{dt^2} = 0 \\] Integrating once: \\[ \\frac{dx}{dt} = v_{0x} = v_0 \\cos\\theta \\] Integrating again with initial condition \\(x(0) = 0\\) : \\[ x(t) = v_0 \\cos\\theta \\cdot t \\]","title":"Horizontal Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion","text":"The differential equation is: \\[ \\frac{d^2 y}{dt^2} = -g \\] Integrating once: \\[ \\frac{dy}{dt} = v_{0y} - g t = v_0 \\sin\\theta - g t \\] Integrating again with \\( \\(y(0) = 0\\) \\) : \\[ y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 \\] These equations describe the projectile\u2019s position parametrically. The trajectory is a parabola, as \\(y(t)\\) is quadratic in \\(t\\) , while \\(x(t)\\) is linear.","title":"Vertical Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#family-of-solutions","text":"The solutions depend on free parameters: - \\(v_0\\) : Initial velocity - \\(\\theta\\) : Angle of projection - \\(g\\) : Gravitational acceleration - Initial height \\( \\(h\\) \\) (if \\(y_0 \\neq 0\\) ) Varying these parameters generates a family of trajectories, from flat, fast arcs (low \\(\\theta\\) , high \\(v_0\\) ) to steep, short parabolas (high \\(\\theta\\) , low \\(v_0\\) ).","title":"Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#deriving-the-range","text":"The range \\(R\\) is the horizontal distance traveled when the projectile returns to \\(y = 0\\) . Set \\(y(t) = 0\\) : \\[ v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 = 0 \\] Factorize: \\[ t \\left( v_0 \\sin\\theta - \\frac{1}{2} g t \\right) = 0 \\] Solutions are \\( \\(t = 0\\) \\) (launch) and: \\[ t = \\frac{2 v_0 \\sin\\theta}{g} \\] This is the time of flight. Substitute into \\( \\(x(t)\\) \\) : \\[ R = x\\left(\\frac{2 v_0 \\sin\\theta}{g}\\right) = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} = \\frac{2 v_0^2 \\sin\\theta \\cos\\theta}{g} \\] Using the identity \\( \\(2 \\sin\\theta \\cos\\theta = \\sin 2\\theta\\) \\) : \\[ R = \\frac{v_0^2 \\sin 2\\theta}{g} \\]","title":"Deriving the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#dependence-on-angle","text":"Maximum Range : \\(R\\) is maximized when \\(\\sin 2\\theta = 1\\) , i.e., \\(2\\theta = 90^\\circ\\) , so \\(\\theta = 45^\\circ\\) . Then: \\[ R_{\\text{max}} = \\frac{v_0^2}{g} \\] Symmetry : \\(R(\\theta) = R(90^\\circ - \\theta)\\) , e.g., ranges at \\(30^\\circ\\) and \\(60^\\circ\\) are equal, due to \\(\\sin(180^\\circ - 2\\theta) = \\sin 2\\theta\\) . Limits : At \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) , \\(\\sin 2\\theta = 0\\) , so \\(R = 0\\) .","title":"Dependence on Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#other-parameters","text":"Initial Velocity ( \\(v_0\\) ) : \\(R \\propto v_0^2\\) , a quadratic relationship. Doubling \\(v_0\\) quadruples the range. Gravity ( \\(g\\) ) : \\(R \\propto 1/g\\) . On a planet with lower \\(g\\) (e.g., the Moon), the range increases.","title":"Other Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"Sports : In soccer or golf, athletes adjust \\(\\theta\\) and \\(v_0\\) for desired distance, though air resistance and spin complicate the ideal \\(45^\\circ\\) . Engineering : Artillery and rocket launches optimize \\(\\theta\\) based on target distance and terrain. Uneven Terrain : If launched from height \\(h\\) , the range equation becomes: \\[ R = \\frac{v_0^2}{g} \\left( \\sin 2\\theta + \\frac{2 h g}{v_0^2} \\cos^2\\theta \\right)^{1/2} \\] Air Resistance : Introduces a drag force proportional to velocity squared, reducing range and shifting the optimal angle below \\(45^\\circ\\) .","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"Here\u2019s a Python script to simulate and visualize the range versus angle: import numpy as np import matplotlib.pyplot as plt # Parameters g = 9.8 # m/s^2 v0_values = [10, 20, 30] # m/s theta_deg = np.linspace(0, 90, 91) # degrees theta_rad = np.radians(theta_deg) # Range function def range_theta(v0, theta_rad, g): return (v0**2 * np.sin(2 * theta_rad)) / g # Compute ranges for different v0 ranges = {v0: range_theta(v0, theta_rad, g) for v0 in v0_values} # Plotting plt.figure(figsize=(10, 6)) for v0, R in ranges.items(): plt.plot(theta_deg, R, label=f'v0 = {v0} m/s') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (m)') plt.title('Range vs. Angle of Projection') plt.legend() plt.grid(True) plt.show() # Find maximum range and optimal angle for v0 in v0_values: R = range_theta(v0, theta_rad, g) max_R = np.max(R) opt_theta = theta_deg[np.argmax(R)] print(f\"v0 = {v0} m/s: Max Range = {max_R:.2f} m at {opt_theta}\u00b0\")","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#output-explanation","text":"The script plots \\(R\\) versus \\(\\theta\\) for \\(v_0 = 10, 20, 30 \\, \\text{m/s}\\) . Peaks occur at \\(45^\\circ\\) , with \\(R_{\\text{max}} = v_0^2 / g\\) . Higher \\(v_0\\) shifts the curve upward quadratically.","title":"Output Explanation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#discussion","text":"","title":"Discussion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations","text":"Idealization : Assumes no air resistance, flat terrain, and constant \\(g\\) . Realism : Drag reduces range and optimal \\(\\theta\\) ; wind adds lateral deviation.","title":"Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#extensions","text":"Drag : Model with \\(F_d = -k v^2\\) , solved numerically (e.g., Runge-Kutta). Terrain : Adjust \\(y(t) = 0\\) to \\(y(t) = f(x)\\) . 3D Motion : Include crosswinds or spin (Magnus effect). This model, while simple, bridges theory and application, from classroom physics to real-world engineering challenges.","title":"Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 1. Theoretical Foundation The forced damped pendulum is governed by a second-order nonlinear differential equation that incorporates gravity (restoring force), damping, and an external periodic force. Let\u2019s derive it step-by-step. Governing Equation Consider a pendulum of length \\(l\\) and mass \\(m\\) , with angle \\(\\theta\\) from the vertical: Restoring force: Gravitational torque, \\(-\\frac{mg}{l} \\sin\\theta\\) . Damping: Proportional to angular velocity, \\(-b \\dot{\\theta}\\) (where \\(b\\) is the damping coefficient). External force: A periodic driving torque, \\(F_0 \\cos(\\omega t)\\) , where \\(F_0\\) is the amplitude and \\(\\omega\\) is the driving frequency. The equation of motion, from Newton\u2019s second law for rotation ( \\(I \\ddot{\\theta} = \\sum \\tau\\) ), is: \\[ ml^2 \\ddot{\\theta} + b \\dot{\\theta} + mg \\sin\\theta = F_0 \\cos(\\omega t) \\] Divide through by \\(ml^2\\) and define: - \\(\\omega_0 = \\sqrt{\\frac{g}{l}}\\) (natural frequency), \\(\\gamma = \\frac{b}{ml^2}\\) (damping rate), \\(f = \\frac{F_0}{ml^2}\\) (driving amplitude per unit inertia). The standard form becomes: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\sin\\theta = f \\cos(\\omega t) \\] Small-Angle Approximation For small \\(\\theta\\) , \\(\\sin\\theta \\approx \\theta\\) , simplifying the equation to a linear forced damped oscillator: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\theta = f \\cos(\\omega t) \\] This is solvable analytically: Homogeneous solution: \\(\\theta_h(t) = e^{-\\frac{\\gamma}{2} t} [A \\cos(\\omega_d t) + B \\sin(\\omega_d t)]\\) , where \\(\\omega_d = \\sqrt{\\omega_0^2 - (\\frac{\\gamma}{2})^2}\\) (damped frequency). Particular solution: \\(\\theta_p(t) = C \\cos(\\omega t - \\phi)\\) , with amplitude \\(C = \\frac{f}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\gamma \\omega)^2}}\\) and phase \\(\\phi = \\tan^{-1}\\left(\\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2}\\right)\\) . Resonance Resonance occurs when \\(\\omega \\approx \\omega_0\\) , maximizing \\(C\\) . For light damping ( \\(\\gamma\\) small), the amplitude peaks sharply, amplifying the pendulum\u2019s response. 2. Analysis of Dynamics Parameter Effects Damping ( \\(\\gamma\\) ) : High \\(\\gamma\\) suppresses oscillations; low \\(\\gamma\\) allows sustained or chaotic motion. Driving Amplitude ( \\(f\\) ) : Small \\(f\\) yields regular oscillations; large \\(f\\) can push the system into chaos. Driving Frequency ( \\(\\omega\\) ) : Near \\(\\omega_0\\) , resonance occurs; far from \\(\\omega_0\\) , motion may become quasiperiodic or chaotic. Transition to Chaos The nonlinear term \\(\\sin\\theta\\) (absent in the small-angle case) introduces complexity: Periodic Motion: At low \\(f\\) , the pendulum locks to the driving frequency. Chaos: High \\(f\\) or specific \\(\\omega\\) values lead to unpredictable, aperiodic motion, sensitive to initial conditions. 3. Practical Applications Energy Harvesting: Oscillating systems (e.g., piezoelectric devices) convert motion to electricity, optimized near resonance. Suspension Bridges: External forces (wind) can drive oscillations, requiring damping to prevent collapse (e.g., Tacoma Narrows). Circuits: Driven RLC circuits mirror this behavior, used in signal processing. \\(V=Velocity\\) \\(A=Acceleration\\) 4. Implementation Let\u2019s simulate this using Python with the Runge-Kutta method (RK4) for the nonlinear equation, visualizing motion, phase portraits, and Poincar\u00e9 sections. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Define the system def pendulum_deriv(state, t, gamma, omega0, f, omega): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -gamma * theta_dot - omega0**2 * np.sin(theta) + f * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt] # Parameters g = 9.81 # m/s^2 l = 1.0 # m omega0 = np.sqrt(g / l) gamma = 0.5 # damping coefficient f = 1.2 # driving amplitude omega = 2/3 * omega0 # driving frequency # Time array t = np.linspace(0, 50, 1000) # Initial conditions theta0 = 0.1 # radians theta_dot0 = 0.0 state0 = [theta0, theta_dot0] # Solve ODE sol = odeint(pendulum_deriv, state0, t, args=(gamma, omega0, f, omega)) theta, theta_dot = sol[:, 0], sol[:, 1] # Plots plt.figure(figsize=(12, 8)) # Time series plt.subplot(2, 2, 1) plt.plot(t, theta, 'b') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.title('Pendulum Motion') # Phase portrait plt.subplot(2, 2, 2) plt.plot(theta, theta_dot, 'r') plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Phase Portrait') # Vary parameters for resonance and chaos f_values = [0.5, 1.2, 1.5] # Explore different amplitudes plt.figure(figsize=(12, 4)) for i, f in enumerate(f_values): sol = odeint(pendulum_deriv, state0, t, args=(gamma, omega0, f, omega)) plt.subplot(1, 3, i+1) plt.plot(t, sol[:, 0]) plt.title(f'f = {f}') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.tight_layout() plt.show() Output Explanation Time Series: Shows \\(\\theta(t)\\) \u2014regular for small \\(f\\) , chaotic for large \\(f\\) . Phase Portrait: A closed loop indicates periodic motion; scattered points suggest chaos. Poincar\u00e9 Section: Discrete points for periodic motion; a cloud for chaos. Parameter Variation: Low \\(f\\) (0.5) gives damped oscillations, higher \\(f\\) (1.5) shows chaotic behavior. Deliverables Solutions: Linear case has damped + driven terms; nonlinear requires numerical methods. Graphics: Time series, phase portraits, and Poincar\u00e9 sections illustrate dynamics. Limitations: Assumes constant \\(\\gamma\\) , periodic forcing, and no friction irregularities. Extensions: Add nonlinear damping ( \\(\\gamma |\\dot{\\theta}| \\dot{\\theta}\\) ) or stochastic forcing. Discussion The forced damped pendulum bridges simple oscillators and complex systems. Resonance amplifies energy transfer, while chaos reveals sensitivity to conditions\u2014key for engineering and physics. For deeper analysis, bifurcation diagrams (varying \\(f\\) or \\(\\omega\\) ) could map transitions to chaos.","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#1-theoretical-foundation","text":"The forced damped pendulum is governed by a second-order nonlinear differential equation that incorporates gravity (restoring force), damping, and an external periodic force. Let\u2019s derive it step-by-step.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#governing-equation","text":"Consider a pendulum of length \\(l\\) and mass \\(m\\) , with angle \\(\\theta\\) from the vertical: Restoring force: Gravitational torque, \\(-\\frac{mg}{l} \\sin\\theta\\) . Damping: Proportional to angular velocity, \\(-b \\dot{\\theta}\\) (where \\(b\\) is the damping coefficient). External force: A periodic driving torque, \\(F_0 \\cos(\\omega t)\\) , where \\(F_0\\) is the amplitude and \\(\\omega\\) is the driving frequency. The equation of motion, from Newton\u2019s second law for rotation ( \\(I \\ddot{\\theta} = \\sum \\tau\\) ), is: \\[ ml^2 \\ddot{\\theta} + b \\dot{\\theta} + mg \\sin\\theta = F_0 \\cos(\\omega t) \\] Divide through by \\(ml^2\\) and define: - \\(\\omega_0 = \\sqrt{\\frac{g}{l}}\\) (natural frequency), \\(\\gamma = \\frac{b}{ml^2}\\) (damping rate), \\(f = \\frac{F_0}{ml^2}\\) (driving amplitude per unit inertia). The standard form becomes: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\sin\\theta = f \\cos(\\omega t) \\]","title":"Governing Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#small-angle-approximation","text":"For small \\(\\theta\\) , \\(\\sin\\theta \\approx \\theta\\) , simplifying the equation to a linear forced damped oscillator: \\[ \\ddot{\\theta} + \\gamma \\dot{\\theta} + \\omega_0^2 \\theta = f \\cos(\\omega t) \\] This is solvable analytically: Homogeneous solution: \\(\\theta_h(t) = e^{-\\frac{\\gamma}{2} t} [A \\cos(\\omega_d t) + B \\sin(\\omega_d t)]\\) , where \\(\\omega_d = \\sqrt{\\omega_0^2 - (\\frac{\\gamma}{2})^2}\\) (damped frequency). Particular solution: \\(\\theta_p(t) = C \\cos(\\omega t - \\phi)\\) , with amplitude \\(C = \\frac{f}{\\sqrt{(\\omega_0^2 - \\omega^2)^2 + (\\gamma \\omega)^2}}\\) and phase \\(\\phi = \\tan^{-1}\\left(\\frac{\\gamma \\omega}{\\omega_0^2 - \\omega^2}\\right)\\) .","title":"Small-Angle Approximation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#resonance","text":"Resonance occurs when \\(\\omega \\approx \\omega_0\\) , maximizing \\(C\\) . For light damping ( \\(\\gamma\\) small), the amplitude peaks sharply, amplifying the pendulum\u2019s response.","title":"Resonance"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#2-analysis-of-dynamics","text":"","title":"2. Analysis of Dynamics"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameter-effects","text":"Damping ( \\(\\gamma\\) ) : High \\(\\gamma\\) suppresses oscillations; low \\(\\gamma\\) allows sustained or chaotic motion. Driving Amplitude ( \\(f\\) ) : Small \\(f\\) yields regular oscillations; large \\(f\\) can push the system into chaos. Driving Frequency ( \\(\\omega\\) ) : Near \\(\\omega_0\\) , resonance occurs; far from \\(\\omega_0\\) , motion may become quasiperiodic or chaotic.","title":"Parameter Effects"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#transition-to-chaos","text":"The nonlinear term \\(\\sin\\theta\\) (absent in the small-angle case) introduces complexity: Periodic Motion: At low \\(f\\) , the pendulum locks to the driving frequency. Chaos: High \\(f\\) or specific \\(\\omega\\) values lead to unpredictable, aperiodic motion, sensitive to initial conditions.","title":"Transition to Chaos"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#3-practical-applications","text":"Energy Harvesting: Oscillating systems (e.g., piezoelectric devices) convert motion to electricity, optimized near resonance. Suspension Bridges: External forces (wind) can drive oscillations, requiring damping to prevent collapse (e.g., Tacoma Narrows). Circuits: Driven RLC circuits mirror this behavior, used in signal processing. \\(V=Velocity\\) \\(A=Acceleration\\)","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#4-implementation","text":"Let\u2019s simulate this using Python with the Runge-Kutta method (RK4) for the nonlinear equation, visualizing motion, phase portraits, and Poincar\u00e9 sections. import numpy as np import matplotlib.pyplot as plt from scipy.integrate import odeint # Define the system def pendulum_deriv(state, t, gamma, omega0, f, omega): theta, theta_dot = state dtheta_dt = theta_dot dtheta_dot_dt = -gamma * theta_dot - omega0**2 * np.sin(theta) + f * np.cos(omega * t) return [dtheta_dt, dtheta_dot_dt] # Parameters g = 9.81 # m/s^2 l = 1.0 # m omega0 = np.sqrt(g / l) gamma = 0.5 # damping coefficient f = 1.2 # driving amplitude omega = 2/3 * omega0 # driving frequency # Time array t = np.linspace(0, 50, 1000) # Initial conditions theta0 = 0.1 # radians theta_dot0 = 0.0 state0 = [theta0, theta_dot0] # Solve ODE sol = odeint(pendulum_deriv, state0, t, args=(gamma, omega0, f, omega)) theta, theta_dot = sol[:, 0], sol[:, 1] # Plots plt.figure(figsize=(12, 8)) # Time series plt.subplot(2, 2, 1) plt.plot(t, theta, 'b') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.title('Pendulum Motion') # Phase portrait plt.subplot(2, 2, 2) plt.plot(theta, theta_dot, 'r') plt.xlabel('\u03b8 (rad)') plt.ylabel('d\u03b8/dt (rad/s)') plt.title('Phase Portrait') # Vary parameters for resonance and chaos f_values = [0.5, 1.2, 1.5] # Explore different amplitudes plt.figure(figsize=(12, 4)) for i, f in enumerate(f_values): sol = odeint(pendulum_deriv, state0, t, args=(gamma, omega0, f, omega)) plt.subplot(1, 3, i+1) plt.plot(t, sol[:, 0]) plt.title(f'f = {f}') plt.xlabel('Time (s)') plt.ylabel('\u03b8 (rad)') plt.tight_layout() plt.show()","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#output-explanation","text":"Time Series: Shows \\(\\theta(t)\\) \u2014regular for small \\(f\\) , chaotic for large \\(f\\) . Phase Portrait: A closed loop indicates periodic motion; scattered points suggest chaos. Poincar\u00e9 Section: Discrete points for periodic motion; a cloud for chaos. Parameter Variation: Low \\(f\\) (0.5) gives damped oscillations, higher \\(f\\) (1.5) shows chaotic behavior.","title":"Output Explanation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#deliverables","text":"Solutions: Linear case has damped + driven terms; nonlinear requires numerical methods. Graphics: Time series, phase portraits, and Poincar\u00e9 sections illustrate dynamics. Limitations: Assumes constant \\(\\gamma\\) , periodic forcing, and no friction irregularities. Extensions: Add nonlinear damping ( \\(\\gamma |\\dot{\\theta}| \\dot{\\theta}\\) ) or stochastic forcing.","title":"Deliverables"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#discussion","text":"The forced damped pendulum bridges simple oscillators and complex systems. Resonance amplifies energy transfer, while chaos reveals sensitivity to conditions\u2014key for engineering and physics. For deeper analysis, bifurcation diagrams (varying \\(f\\) or \\(\\omega\\) ) could map transitions to chaos.","title":"Discussion"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Alright, let's address the tasks from the provided image in English: 1. Derive the relationship between the square of the orbital period and the cube of the orbital radius for circular orbits. Setup: Assume a celestial body (planet, satellite) moving in a circular orbit. The centripetal force required for this motion is provided by the gravitational force. Equations: Gravitational Force (F_g): F_g = G * (M * m) / r\u00b2 (G: gravitational constant, M: central body mass, m: orbiting body mass, r: orbital radius) Centripetal Force (F_c): F_c = m * v\u00b2 / r (v: orbital velocity) Orbital Velocity (v): v = 2\u03c0r / T (T: orbital period) Derivation: Set F_g = F_c: G * (M * m) / r\u00b2 = m * v\u00b2 / r Simplify m: G * M / r\u00b2 = v\u00b2 / r Substitute v: G * M / r\u00b2 = (2\u03c0r / T)\u00b2 / r Rearrange: G * M / r\u00b2 = 4\u03c0\u00b2r\u00b2 / (T\u00b2 * r) Simplify r: G * M / r\u00b2 = 4\u03c0\u00b2r / T\u00b2 Isolate T\u00b2: T\u00b2 = (4\u03c0\u00b2 / (G * M)) * r\u00b3 Result: T\u00b2 \u221d r\u00b3 (The square of the orbital period is proportional to the cube of the orbital radius). 2. Discuss the implications of this relationship for astronomy, including its role in calculating planetary masses and distances. Planetary Masses: If we know the orbital period (T) and radius (r) of a satellite, we can calculate the central body's mass (M). Planetary Distances: If we know the orbital period (T) and the central star's mass (M), we can calculate the orbital radius (r). This is crucial for determining distances in our solar system and exoplanetary systems. Other Applications: Determining masses of binary star systems. Understanding galactic rotation curves and mass distributions. Estimating the masses of black holes. 3. Analyze real-world examples, such as the Moon's orbit around Earth or the orbits of planets in the Solar System. Moon's Orbit: The Moon's orbital period is about 27.3 days, and its average radius is about 384,400 km. These values can be used to calculate Earth's mass. Solar System Planets: Each planet has a unique orbital period and radius, consistent with Kepler's Third Law. For example, Jupiter's orbital period is about 11.86 years, and its radius is about 778.5 million km. Exoplanets: Tools like the Kepler Space Telescope measure exoplanet orbital periods and radii, allowing us to infer their masses and potential habitability. 4. Implement a computational model to simulate circular orbits and verify the relationship. Python Example: import numpy as np import matplotlib.pyplot as plt # Constants G = 6.67430e-11 # Gravitational constant M = 1.989e30 # Sun's mass # Orbital radii r_values = np.linspace(1e10, 1e12, 100) # Calculate orbital periods T_values = np.sqrt((4 * np.pi**2 / (G * M)) * r_values**3) # Convert to years T_years = T_values / (365.25 * 24 * 3600) # Plot plt.plot(r_values, T_years) plt.xlabel('Orbital Radius (m)') plt.ylabel('Orbital Period (years)') plt.title('Kepler\\'s Third Law Simulation') plt.grid(True) plt.show() # Verify T^2 and r^3 relationship plt.plot(r_values**3, T_values**2) plt.xlabel('r^3 (m^3)') plt.ylabel('T^2 (s^2)') plt.title('T^2 vs r^3') plt.grid(True) plt.show() Explanation: This code calculates orbital periods for various radii and plots them. It also demonstrates the linear relationship between T\u00b2 and r\u00b3.","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}